import os
import logging
import json
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, CallbackQueryHandler
)

# --- Firebase Imports ---
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω firebase-admin: pip install firebase-admin
import firebase_admin
from firebase_admin import credentials, firestore, auth

# --- –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
load_dotenv()

# --- –ò–º–ø–æ—Ä—Ç –∏–∑ agent_core ---
try:
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ agent_core
    from agent_core import create_telegram_post, get_user_stats, get_community_rating, answer_question, analyze_message
except ImportError:
    logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ agent_core.py. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
    raise

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—á–∏—Ç–∞–µ—Ç—Å—è –∏–∑ .env) ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")
POST_HISTORY_FILE = "published_posts.json"

# --- Firebase Initialization ---
db = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º db –∫–∞–∫ None –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
app_id = os.getenv("__app_id", "default-app-id") # app_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–≥–¥–∞
try:
    firebase_config_str = os.getenv("__firebase_config")
    if firebase_config_str:
        firebase_config = json.loads(firebase_config_str)
        if not firebase_admin._apps:
            cred = credentials.Certificate(firebase_config)
            firebase_admin.initialize_app(cred)
            db = firestore.client()
            logger.info("Firebase —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        else:
            logger.warning("Firebase —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
            db = firestore.client() # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç, –µ—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    else:
        logger.warning("Firebase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç __firebase_config –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: {e}", exc_info=True)
    db = None

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def save_post_to_history(post_text: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏."""
    history = []
    try:
        with open(POST_HISTORY_FILE, 'r', encoding='utf-8') as f:
            history = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        pass

    history.append(post_text)
    if len(history) > 10: # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –ø–æ—Å—Ç–∞–º–∏
        history = history[-10:]

    with open(POST_HISTORY_FILE, 'w', encoding='utf-8') as f:
        json.dump(history, f, ensure_ascii=False, indent=4)

async def register_user_and_save_message(update: Update, message_text: str):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    if not db:
        logger.warning("Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    user_id = str(update.effective_user.id)
    username = update.effective_user.username or f"user_{user_id}"
    
    user_ref = db.collection(f"artifacts/{app_id}/users/{user_id}/profile").document("data")
    
    try:
        user_doc = user_ref.get()
        if not user_doc.exists:
            user_data = {
                "telegram_id": user_id,
                "username": username,
                "first_name": update.effective_user.first_name or "",
                "last_name": update.effective_user.last_name or "",
                "registration_date": firestore.SERVER_TIMESTAMP,
                "activity_score": 0,
                "jk_earned": 0
            }
            user_ref.set(user_data)
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {username} ({user_id})")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages_collection_ref = db.collection(f"artifacts/{app_id}/users/{user_id}/messages")
        message_data = {
            "text": message_text,
            "timestamp": firestore.SERVER_TIMESTAMP
        }
        messages_collection_ref.add(message_data)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Firestore.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Firestore: {e}", exc_info=True)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await register_user_and_save_message(update, "/start")
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ù–µ–π—Ä–æ Jekardos. –ß—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç, '
        '–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /generate [—Ç–µ–º–∞ –ø–æ—Å—Ç–∞].'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await register_user_and_save_message(update, "/help")
    help_text = """
ü§ñ **JK Community Hub Bot** - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/generate [—Ç–µ–º–∞] - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
/stats - –í–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/rating - –†–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
/ask [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É
/analyze [—Ç–µ–∫—Å—Ç] - –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = str(update.effective_user.id)
    await register_user_and_save_message(update, "/stats")
    try:
        stats = get_user_stats(user_id)
        await update.message.reply_text(f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n{stats}", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def rating_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    await register_user_and_save_message(update, "/rating")
    try:
        rating = get_community_rating()
        await update.message.reply_text(f"üèÜ **–†–µ–π—Ç–∏–Ω–≥ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:**\n\n{rating}", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def ask_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    question = " ".join(context.args)
    await register_user_and_save_message(update, f"/ask {question}")
    if not question:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: /ask –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç TON –±–ª–æ–∫—á–µ–π–Ω?")
        return
    await update.message.reply_text(f"ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å: '{question}'...")
    try:
        answer = answer_question(question)
        await update.message.reply_text(f"üí° **–û—Ç–≤–µ—Ç:**\n\n{answer}", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å –∏ —Å–ø–∞–º."""
    text_to_analyze = " ".join(context.args)
    await register_user_and_save_message(update, f"/analyze {text_to_analyze}")
    if not text_to_analyze:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /analyze –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å")
        return
    await update.message.reply_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç: '{text_to_analyze[:50]}...'")
    try:
        analysis = analyze_message(text_to_analyze)
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        pretty_analysis = json.dumps(analysis, ensure_ascii=False, indent=2)
        await update.message.reply_text(f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:**\n```json\n{pretty_analysis}\n```", parse_mode='MarkdownV2')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def generate_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞."""
    query = " ".join(context.args)
    await register_user_and_save_message(update, f"/generate {query}")
    if not query:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É. –ù–∞–ø—Ä–∏–º–µ—Ä: /generate –ø–æ—Å—Ç –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ø–æ—Ö–æ–¥—É –≤ –≥–æ—Ä—ã.")
        return
    await update.message.reply_text(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: '{query}'. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã...")
    try:
        post_text = create_telegram_post(query)
        context.user_data['post_text'] = post_text
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text=post_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def confirm_publish(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª."""
    query = update.callback_query
    await query.answer()
    post_text = context.user_data.get('post_text')
    if not post_text:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        context.user_data.clear()
        return
    if query.data == 'publish':
        channel_id = TELEGRAM_CHANNEL_ID
        if not channel_id:
            await query.edit_message_text("–û—à–∏–±–∫–∞: ID –∫–∞–Ω–∞–ª–∞ Telegram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
            return
        try:
            await context.bot.send_message(chat_id=channel_id, text=post_text)
            save_post_to_history(post_text)
            await query.edit_message_text("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!", reply_markup=None)
            if db:
                posts_collection_ref = db.collection(f"artifacts/{app_id}/public/data/published_posts")
                post_data = {
                    "text": post_text,
                    "timestamp": firestore.SERVER_TIMESTAMP,
                    "published_by_user_id": str(update.effective_user.id),
                    "published_by_username": update.effective_user.username or f"user_{str(update.effective_user.id)}"
                }
                posts_collection_ref.add(post_data)
        except Exception as e:
            await query.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å. –û—à–∏–±–∫–∞: {e}", reply_markup=None)
    else: # 'cancel'
        await query.edit_message_text("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
    context.user_data.clear()

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    message_text = update.message.text
    await register_user_and_save_message(update, message_text)

    if message_text.startswith('/'):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
        return
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å
        analysis_result = analyze_message(message_text)
        
        is_toxic = analysis_result.get("is_toxic", False)
        toxicity_score = analysis_result.get("toxicity_score", 0)

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–∫—Å–∏—á–Ω–æ –∏ –æ—Ü–µ–Ω–∫–∞ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ (7), –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        if is_toxic and toxicity_score >= 7:
            reason = analysis_result.get('reason', '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞.')
            await update.message.reply_text(f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** {reason} –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã.", parse_mode='Markdown')
            return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å
        if "?" in message_text or any(word in message_text.lower() for word in ["–∫–∞–∫", "—á—Ç–æ", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "–ø–æ–º–æ–≥–∏", "–ø–æ–¥—Å–∫–∞–∂–∏"]):
            answer = answer_question(message_text)
            await update.message.reply_text(f"üí° **–û—Ç–≤–µ—Ç:**\n\n{answer}", parse_mode='Markdown')
            return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ!")

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.critical("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
        return
    
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("generate", generate_start))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("rating", rating_command))
    application.add_handler(CommandHandler("ask", ask_command))
    application.add_handler(CommandHandler("analyze", analyze_command))
    application.add_handler(CallbackQueryHandler(confirm_publish))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()