#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
"""

import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_environment():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = ['TELEGRAM_BOT_TOKEN', 'GIGACHAT_CLIENT_ID', 'GIGACHAT_CLIENT_SECRET']
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        return False
    else:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True

def test_post_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞...")
    
    try:
        from agent_core import create_telegram_post
        
        # –¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞
        test_topic = "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ—Ö–æ–¥—É"
        
        print(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: '{test_topic}'")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
        post = create_telegram_post(test_topic)
        
        if post and len(post) > 50:
            print("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            print(f"–î–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞: {len(post)} —Å–∏–º–≤–æ–ª–æ–≤")
            return True
        else:
            print(f"‚ùå –ê–≥–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç (–æ—Ç–≤–µ—Ç: '{post}')")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        return False

def test_message_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        from agent_core import analyze_message
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        test_messages = [
            "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞?",
            "–≠—Ç–æ —Å–ø–∞–º —Ä–µ–∫–ª–∞–º–∞ –∫—É–ø–∏—Ç–µ —Å–µ–π—á–∞—Å",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç TON –±–ª–æ–∫—á–µ–π–Ω?"
        ]
        
        for i, message in enumerate(test_messages, 1):
            print(f"–¢–µ—Å—Ç {i}: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message[:30]}...'")
            analysis = analyze_message(message)
            
            if analysis and len(analysis) > 10:
                print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω: {analysis[:100]}...")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {i}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return False

def test_question_answering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã...")
    
    try:
        from agent_core import answer_question
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        test_questions = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ JK Coin?",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç TON –±–ª–æ–∫—á–µ–π–Ω?",
            "–ö–∞–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É TON?"
        ]
        
        for i, question in enumerate(test_questions, 1):
            print(f"–¢–µ—Å—Ç {i}: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å: '{question}'")
            answer = answer_question(question)
            
            if answer and len(answer) > 20:
                print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {answer[:100]}...")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {i}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã: {e}")
        return False

def test_statistics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    try:
        from agent_core import get_user_stats, get_community_rating
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_stats = get_user_stats("test_user_123")
        if user_stats and "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" in user_stats:
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        print("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞...")
        community_rating = get_community_rating()
        if community_rating and "–†–µ–π—Ç–∏–Ω–≥ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞" in community_rating:
            print("‚úÖ –†–µ–π—Ç–∏–Ω–≥ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        test_environment,
        test_post_generation,
        test_message_analysis,
        test_question_answering,
        test_statistics
    ]
    
    results = []
    
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
            results.append(False)
    
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)
    
    passed = sum(results)
    total = len(results)
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º.")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("  python telegram_bot.py")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  /help - –°–ø—Ä–∞–≤–∫–∞")
        print("  /generate [—Ç–µ–º–∞] - –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞")
        print("  /stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("  /rating - –†–µ–π—Ç–∏–Ω–≥ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞")
        print("  /ask [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        print("  /analyze [—Ç–µ–∫—Å—Ç] - –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
    else:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–π–¥–µ–Ω–æ {passed} –∏–∑ {total} —Ç–µ—Å—Ç–æ–≤")
        print("\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞:")
        print("  python test_bot.py")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 